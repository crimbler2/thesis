apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks-cluster-setup
  labels:
    provider: aws
    service: eks
    compute: managed
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: thesis.io/v1alpha1
    kind: XClusterSetup

  patchSets:
    - name: common-parameters
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef.name
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: metadata.labels.claim

  resources:
    - name: vpc
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            enableDnsSupport: true
            enableDnsHostNames: true
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.vpc-cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%svpc"


    - name: internetgateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: InternetGateway
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
              matchLabels:
                claim: # patched
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%sigw"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels.claim

    - name: subnet-public-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            visibility: public
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.generateName
              - fromFieldPath: spec.subnets.public.name
            strategy: string
            string:
              fmt: "%s%s-subnet"
          toFieldPath: spec.forProvider.tags[0].value
        - fromFieldPath: spec.subnets.public.cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.region
              - fromFieldPath: spec.subnets.public.availabilityZone
            strategy: string
            string:
              fmt: "%s%s"
          toFieldPath: spec.forProvider.availabilityZone
        - fromFieldPath: spec.subnets.public.availabilityZone
          toFieldPath: metadata.labels.zone
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels.claim

    - name: subnet-private-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            visibility: private
            index: "1"
        spec:
          forProvider:
            mapPublicIpOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.generateName
              - fromFieldPath: spec.subnets.private-1.name
            strategy: string
            string:
              fmt: "%s%s-subnet"
          toFieldPath: spec.forProvider.tags[0].value
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.subnets.private-1.cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.region
              - fromFieldPath: spec.subnets.private-1.availabilityZone
            strategy: string
            string:
              fmt: "%s%s"
          toFieldPath: spec.forProvider.availabilityZone
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.subnets.private-1.availabilityZone
          toFieldPath: metadata.labels.zone
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels.claim

    - name: subnet-private-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            visibility: private
            index: "2"
        spec:
          forProvider:
            mapPublicIpOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.generateName
              - fromFieldPath: spec.subnets.private-2.name
            strategy: string
            string:
              fmt: "%s%s-subnet"
          toFieldPath: spec.forProvider.tags[0].value
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.subnets.private-2.cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.region
              - fromFieldPath: spec.subnets.private-2.availabilityZone
            strategy: string
            string:
              fmt: "%s%s"
          toFieldPath: spec.forProvider.availabilityZone
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.subnets.private-2.availabilityZone
          toFieldPath: metadata.labels.zone
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.vpcIdSelector.matchLabels.claim

    - name: elastic-ip
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Address
        spec:
          forProvider:
            domain: vpc
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%sngw-eip"

    - name: natgateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: NATGateway
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchLabels:
                visibility: public
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%sngw"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.allocationIdSelector.matchLabels.claim

    - name: routetable-public
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            associations:
              - subnetIdSelector:
                  matchLabels:
                    visibility: public
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.generateName
            strategy: string
            string:
              fmt: "%spublic-route-table"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.routes[0].gatewayIdSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.claim

    - name: routetable-private-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            associations:
              - subnetIdSelector:
                  matchLabels:
                    visibility: private
                    index: "1"
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.generateName
            strategy: string
            string:
              fmt: "%sprivate-route-table-1"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.routes[0].natGatewayIdSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.claim

    - name: routetable-private-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            associations:
              - subnetIdSelector:
                  matchLabels:
                    visibility: private
                    index: "2"
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.generateName
            strategy: string
            string:
              fmt: "%sprivate-route-table-2"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.routes[0].natGatewayIdSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.claim

    - name: eks-cluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            resourcesVpcConfig:
              endpointPrivateAccess: false
              endpointPublicAccess: true
              subnetIdSelector:
                matchControllerRef: true
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                usage: eks-cluster
          writeConnectionSecretToRef:
            namespace: crossplane-system
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%scluster"
        - fromFieldPath: spec.k8s-version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleArnSelector.matchLabels.claim
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%scluster-connection"
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.certificateAuthorityData
          toFieldPath: status.eks.clusterCertificateAuthorityData
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.endpoint
          toFieldPath: status.eks.clusterEndpoint
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity.oidc.issuer
          toFieldPath: status.eks.oidcProvider
      connectionDetails:
        - name: cluster-ca
          fromConnectionSecretKey: clusterCA
        - name: apiserver-endpoint
          fromConnectionSecretKey: endpoint
        - name: value
          fromConnectionSecretKey: kubeconfig

    - name: cluster-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            usage: eks-cluster
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                   {
                     "Effect": "Allow",
                     "Principal": {
                       "Service": "eks.amazonaws.com"
                     },
                     "Action": "sts:AssumeRole"
                   }
                 ]
               }
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%scluster-role"

    - name: cluster-policy-attachment
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                usage: eks-cluster
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.claim

    - name: eks-nodegroup
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            instanceTypes:
              - t2.small
            scalingConfig:
              minSize: 1
            subnetSelector:
              matchControllerRef: true
              matchLabels:
                visibility: private
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleSelector:
              matchControllerRef: true
              matchLabels:
                usage: nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%snode-group"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.nodeRoleSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.clusterNameSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.subnetSelector.matchLabels.claim
        - fromFieldPath: spec.k8s-version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.workers-size
          toFieldPath: spec.forProvider.scalingConfig.desiredSize
        - fromFieldPath: spec.workers-size
          toFieldPath: spec.forProvider.scalingConfig.maxSize
        - fromFieldPath: spec.workload-type
          toFieldPath: spec.forProvider.amiType
          transforms:
            - type: map
              map:
                gpu: AL2_x86_64_GPU
                non-gpu: AL2_x86_64

    - name: node-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            usage: nodegroup
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                   {
                     "Effect": "Allow",
                     "Principal": {
                       "Service": "ec2.amazonaws.com"
                     },
                     "Action": "sts:AssumeRole"
                   }
                 ]
               }
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%snode-role"

    - name: node-role-worker-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                usage: nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.claim

    - name: node-role-cni-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                usage: nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.claim

    - name: node-role-ecr-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                usage: nodegroup
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.claim

###### All resources from here configure the connection to the created cluster and deploy to it
    - name: argocd-secret-remote-cluster-credentials
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                namespace: argocd-system
                labels:
                  argocd.argoproj.io/secret-type: cluster
              type: Opaque
          providerConfigRef:
            name: kubernetes-provider-local-config
      patches:
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%sargocd-cluster-secret"
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.forProvider.manifest.data.name
          transforms:
            - type: string
              string:
                fmt: "%scluster"
            - type: string
              string:
                type: Convert
                convert: ToBase64
        - fromFieldPath: status.eks.clusterEndpoint
          toFieldPath: spec.forProvider.manifest.data.server
          transforms:
            - type: string
              string:
                type: Convert
                convert: ToBase64
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: status.eks.clusterCertificateAuthorityData
              - fromFieldPath: metadata.generateName
            strategy: string
            string:
              fmt: |
                {
                  "tlsClientConfig":{
                    "insecure":false,
                    "caData":"%s"
                  },
                  "awsAuthConfig":{
                    "clusterName":"%scluster",
                    "roleARN":"arn:aws:iam::843588259092:role/dev-thesis-sa"
                  }
                }
          toFieldPath: spec.forProvider.manifest.data.config
          transforms:
            - type: string
              string:
                type: Convert
                convert: ToBase64
          policy:
            fromFieldPath: Required

    - name: remote-cluster-helm-provider-config
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              namespace: crossplane-system
              key: kubeconfig
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
        # This ProviderConfig uses the above EKSCluster's connection secret as
        # its credentials secret.
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%scluster-connection"
      readinessChecks:
        - type: None

    - name: remote-cluster-argocd-installation
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          annotations:
            crossplane.io/external-name: argocd
        spec:
          forProvider:
            chart:
              name: argo-cd
              repository: https://argoproj.github.io/argo-helm
              version: 5.6.2
            namespace: argocd-system
            values:
              server:
                service:
                  type: LoadBalancer
                  annotations:
                    service.beta.kubernetes.io/aws-load-balancer-type: nlb
                # change security context to 999 according to: https://www.modulo2.nl/blog/argocd-on-aws-with-multiple-clusters
                securityContext:
                  fsGroup: 999
              controller:
                # change security context to 999 according to: https://www.modulo2.nl/blog/argocd-on-aws-with-multiple-clusters
                securityContext:
                  fsGroup: 999
              configs:
                secret:
                  argocdServerAdminPassword: $2a$12$IRs7lU0wuPtsG76OsHWS8ONpyVymvHQeOR3wKZR.nUcx0PkIiZw62
                cm:
                  "application.instanceLabelKey": argocd.argoproj.io/tracking-id
              crds:
                keep: false
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name

    - name: remote-cluster-root-application
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          annotations:
            crossplane.io/external-name: argocd-root-application
        spec:
          forProvider:
            chart:
              name: argocd-apps
              repository: https://argoproj.github.io/argo-helm
              version: 0.0.6
            namespace: argocd-system
            values:
              applications:
                - name: root
                  namespace: argocd-system
                  finalizers:
                    - resources-finalizer.argocd.argoproj.io
                  project: default
                  source:
                    targetRevision: HEAD
                  destination:
                    server: https://kubernetes.default.svc
                    namespace: argocd-system
                  syncPolicy:
                    automated:
                      prune: true
                      selfHeal: true
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.rootRepoUrl
          toFieldPath: spec.forProvider.values.applications[0].source.repoURL
        - fromFieldPath: spec.rootRepoPath
          toFieldPath: spec.forProvider.values.applications[0].source.path

    - name: remote-cluster-kubernetes-provider-config
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              namespace: crossplane-system
              key: kubeconfig
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
        # This ProviderConfig uses the above EKSCluster's connection secret as
        # its credentials secret.
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%scluster-connection"
      readinessChecks:
        - type: None

    - name: remote-cluster-argocd-secret-root-repo
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                name: root-repo
                namespace: argocd-system
                labels:
                  argocd.argoproj.io/secret-type: repository
              stringData:
                type: git
              type: Opaque
      patches:
        - fromFieldPath: spec.rootRepoUrl
          toFieldPath: spec.forProvider.manifest.stringData.url
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name

    - name: remote-cluster-oidc-provider
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: OpenIDConnectProvider
        spec:
          forProvider:
            clientIDList:
              - sts.amazonaws.com
            thumbprintList:
              - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: status.eks.oidcProvider
          toFieldPath: spec.forProvider.url
          policy:
            fromFieldPath: Required

    - name: remote-cluster-external-secrets-irsa-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        metadata:
          labels:
            usage: external-secrets
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%sexternal-secrets-irsa-role"
        - fromFieldPath: status.eks.oidcProvider
          toFieldPath: spec.forProvider.assumeRolePolicyDocument
          transforms:
            - type: string
              string:
                fmt: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Sid": "",
                        "Effect": "Allow",
                        "Principal": {
                          "Federated": "arn:aws:iam::843588259092:%s"
                        },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                        "Condition": {
                          "StringLike": {
                            "%s:sub":
                              "system:serviceaccount:external-secrets-system:*"
                          }
                        }
                      }
                    ]
                  }
          policy:
            fromFieldPath: Required

    - name: remote-cluster-external-secrets-irsa-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Policy
        metadata:
          labels:
            usage: external-secrets
        spec:
          forProvider:
            document: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "secretsmanager:GetResourcePolicy",
                              "secretsmanager:GetSecretValue",
                              "secretsmanager:DescribeSecret",
                              "secretsmanager:ListSecretVersionIds"
                          ],
                          "Effect": "Allow",
                          "Resource": "arn:aws:secretsmanager:eu-central-1:843588259092:secret:*"
                      }
                  ],
                  "Version": "2012-10-17"
              }
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.generateName
          toFieldPath: spec.forProvider.name
          transforms:
            - type: string
              string:
                fmt: "%sexternal-secrets-irsa-policy"

    - name: remote-cluster-external-secrets-irsa-rolepolicyattachment
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            roleNameSelector:
              matchControllerRef: true
              matchLabels:
                usage: external-secrets
            policyArnSelector:
              matchControllerRef: true
              matchLabels:
                usage: external-secrets
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.claim
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.policyArnSelector.matchLabels.claim