apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: "update-entries-into-aws-auth-cm-via-secrets"
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  rules:
    - name: "update-aws-auth-entry-when-secret-is-updated"
      match:
        any:
          - resources:
              kinds:
                - Secret
              namespaces:
                - kube-system
              selector:
                matchLabels:
                  wadtfy.io/secret-type: aws-auth-entry
      preconditions:
        any:
          - key: "{{ request.operation }}"
            operator: Equals
            value: UPDATE
      context:
        # access current aws-auth entries via external source, so the value including an {{}} statement does not get evaluated
        - name: currentEntries
          configMap:
            name: aws-auth
            namespace: kube-system
        - name: oldEntry
          variable:
            value: |
              - groups:
                - {{request.oldObject.data.group | base64_decode(@)}}
                rolearn: {{request.oldObject.data.rolearn | base64_decode(@)}}
                username: {{request.oldObject.data.username | base64_decode(@)}}
        - name: newEntry
          variable:
            value: |
              - groups:
                - {{request.object.data.group | base64_decode(@)}}
                rolearn: {{request.object.data.rolearn | base64_decode(@)}}
                username: {{request.object.data.username | base64_decode(@)}}
        - name: newEntries
          variable:
            value: '{{currentEntries.data.mapRoles }}'
            # this command just appends a value to the variable
            # it should be possible by just writing the value next to the variable
            # but due to the fact the variable contains an {{}}-expression, Kyverno seems to try and evaluate it
            # I couldn't find a way to turn this behaviour off. Apparently just referencing as a value does not cause Kyverno to
            # try and evaluate it
            jmesPath: "replace_all(@, '{{oldEntry}}', '{{newEntry}}')"
      mutate:
        targets:
          - apiVersion: v1
            kind: ConfigMap
            name: aws-auth
            namespace: kube-system
        patchStrategicMerge:
          data:
            mapRoles: "{{newEntries}}"